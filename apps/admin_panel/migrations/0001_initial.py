# Generated by Django 4.2.7 on 2023-11-30 19:58

import apps.admin_panel.models.user_models
import ckeditor.fields
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200, verbose_name='Fullname')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('email', models.CharField(max_length=200, verbose_name='Email')),
                ('text', ckeditor.fields.RichTextField(verbose_name='Text')),
                ('answer', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Answer')),
                ('is_seen', models.BooleanField(default=False, verbose_name='Is seen')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='Create date')),
            ],
            options={
                'verbose_name': 'Contact Us',
                'verbose_name_plural': 'Contact Uses',
            },
        ),
        migrations.CreateModel(
            name='DynamicPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('url_title', models.CharField(max_length=200, unique=True, verbose_name='Url title')),
                ('text', ckeditor.fields.RichTextField(verbose_name='Text')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
            options={
                'verbose_name': 'Dynamic page',
                'verbose_name_plural': 'Dynamic pages',
            },
        ),
        migrations.CreateModel(
            name='SiteSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(max_length=200, verbose_name='Site name')),
                ('domain_name', models.CharField(max_length=200, verbose_name='Domain name')),
                ('tell', models.CharField(blank=True, max_length=200, null=True, verbose_name='Phone number')),
                ('mobile', models.CharField(blank=True, max_length=200, null=True, verbose_name='Mobile')),
                ('support_email', models.EmailField(blank=True, max_length=200, null=True, verbose_name='Support email')),
                ('address', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Address')),
                ('about_us_text', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='About us text')),
                ('copy_right', models.TextField(blank=True, null=True, verbose_name='Copy right')),
                ('site_header_logo', models.ImageField(blank=True, null=True, upload_to='images/site-logo', verbose_name='Header logo')),
                ('site_footer_logo', models.ImageField(blank=True, null=True, upload_to='images/site-logo', verbose_name='Footer logo')),
            ],
            options={
                'verbose_name': 'Site setting',
                'verbose_name_plural': 'Site settings',
            },
        ),
        migrations.CreateModel(
            name='DynamicLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('url', models.CharField(max_length=200, verbose_name='Url')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('position', models.CharField(choices=[('SITE_HEADER', 'Site header'), ('SITE_FOOTER', 'Site footer')], default='SITE_HEADER', max_length=200, verbose_name='Position')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('is_delete', models.BooleanField(default=False, verbose_name='Is deleted')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.dynamiclink', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'Dynamic link',
                'verbose_name_plural': 'Dynamic links',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile', models.CharField(blank=True, db_index=True, max_length=200, null=True, verbose_name='Mobile')),
                ('avatar', models.ImageField(blank=True, max_length=200, null=True, upload_to='images/user-avatar', verbose_name='Avatar')),
                ('email_active_code', models.CharField(max_length=300, verbose_name='Email active code')),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Description')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', apps.admin_panel.models.user_models.CustomUserManager()),
            ],
        ),
    ]
